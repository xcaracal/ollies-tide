local prev_idle = true
local alive_status = true

local max_health_stat = 100
local curr_health_stat = max_health_stat
local defense_stat = 10
local crit_rate_stat = 0.1      -- 10% critical rate
local crit_damage_stat = 2.0    -- 200% critical damage
local hp_percent_stat = 1.5     -- 150% HP
local attack_speed_stat = 1.5   -- 150% attack speed

local base_attack_damage = 10
local scaling_factor = 2.0
local scaled_damage = 0

local prev_animation = "idle"

local collision_groups = require "main.collision_groups"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.move_timer = 0
	self.move_direction = -1
	self.flip = vmath.vector3(01, 1, 1)
	self.vel = vmath.vector3(0, 0, 0)
	self.base_attack_damage = base_attack_damage
	self.scaling_factor = scaling_factor
	self.curr_health_stat = curr_health_stat
	self.max_health_stat = max_health_stat
	self.defense_stat = defense_stat
	self.crit_rate_stat = crit_rate_stat
	self.crit_damage_stat = crit_damage_stat
	self.hp_percent_stat = hp_percent_stat
	self.attack_speed_stat = attack_speed_stat
end

function handle_damage_toself_enemy(self, dmg_taken)
	-- Apply defense reduction to incoming damage
	dmg_taken = dmg_taken - self.defense_stat

	curr_health_stat = curr_health_stat - dmg_taken
	if curr_health_stat <= 0 then
		curr_health_stat = 0
	end

	print("Max Health:", max_health_stat)
	print("Current Health:", curr_health_stat)
	msg.post("HealthbarProgress#Healthbar", "set_health", { max_health_stat = self.max_health_stat, curr_health_stat = curr_health_stat })
end

function damage_scale_enemy(base, scale_num)
	print("ENEMY BASE DMG:", base)
	print("ENEMY SCALE DMG:", scale_num)
	return base * scale_num
end

function on_message(self, message_id, message, sender)
    if message_id == hash("animation_done") then
		if prev_animation == "attack" then
			sprite.play_flipbook("#sprite", "EnemyIdle")  -- Switch back to idle animation when attack animation is done
			prev_animation = "idle"
		end
	elseif message_id == hash("collision_response") then
		hit_flag = true
		if message.other_group == collision_groups.PLAYER_GROUP then
			local player_id = message.other_id
			scaled_damage = damage_scale_enemy(self.base_attack_damage, self.scaling_factor)
			msg.post(player_id, "update_health", { damage = scaled_damage })
			local character_position = go.get_position()
			character_position = character_position - vmath.vector3(-200, 0, 0)
			go.set_position(character_position)
		elseif message.other_group == collision_groups.PLAYER_ATTACK_GROUP then
			if prev_animation ~= "attack" then
				sprite.play_flipbook("#sprite", "EnemyAttack")
				prev_animation = "attack"
			end
		end

		hit_flag = false
	elseif message_id == hash("update_health") then
		local damage_from_other = message.damage
		handle_damage_toself_enemy(self, damage_from_other)

		print("HEALTH IS BEING UPDATED", curr_health_stat)
	elseif message_id == hash("stop_sprite") then
		alive_status = false

		if not alive_status then
			go.delete()
		end
	end
end

function update(self, dt)
	local character_position = go.get_position()
	local speed = 50
	if alive_status then
		self.vel.x = self.move_direction * speed
		local pos = go.get_position()
		pos = pos + self.vel * dt
		go.set_position(pos)
	end
	
end

local prev_idle = true
local hit_flag = false
local alive_status = true
local base_attack_damage = 10
local scaling_factor = 3.0 -- You can adjust the scaling factor as needed
local scaled_damage = 0;

local collision_groups = require "main.collision_groups"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.move_timer = 0
	self.move_direction = -1
	self.flip = vmath.vector3(-1, 1, 1)
	self.vel = vmath.vector3(0, 0, 0)
	self.base_attack_damage = base_attack_damage
	self.scaling_factor = scaling_factor
	sprite.set_hflip("#sprite", self.flip.x == -1)
end

function damage_scale(base, scale_num)
	print("ENEMY BASE DMG:", base)
	print("ENEMY SCALE DMG:", scale_num)
	return base * scale_num
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_health_bar") then
		local health_bar_offset = vmath.vector3(0, 50, 0)
		local new_health_bar_position = message.position + health_bar_offset
		gui.set_position(gui.get_node("healthbar"), new_health_bar_position)
	elseif message_id == hash("collision_response") then
		--print("ENEMY HIT")
		hit_flag = true
		if message.other_group == collision_groups.PLAYER_GROUP then
			local player_id = message.other_id
			scaled_damage = damage_scale(self.base_attack_damage, self.scaling_factor)
			msg.post(player_id, "update_health", { damage = scaled_damage })
		end

		local character_position = go.get_position()
		character_position = character_position - vmath.vector3(-60, 0, 0)
		go.set_position(character_position)

		hit_flag = false
	elseif message_id == hash("stop_sprite") then
		alive_status = false

		if not alive_status then
			go.delete()
		end
	end
end

function update(self, dt)
	local character_position = go.get_position()
	msg.post("#enemy", "update_health_bar", { position = character_position })

	local speed = 50

	if alive_status then
		self.vel.x = self.move_direction * speed
		local pos = go.get_position()
		pos = pos + self.vel * dt
		go.set_position(pos)
	end
end

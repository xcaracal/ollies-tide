local function update_healthbar(p)
	-- Get the GUI node representing the health bar
	local node = gui.get_node("healthbar")
	local size = gui.get_size(node)

	-- Ensure p is within the valid range [0, 100]
	p = math.max(0, math.min(100, p))

	-- Update the size based on health percentage in the range of 0-100
	size.x = (1 - p / 100) * 300 -- Max width is 400 pixels, subtracting from 1 to invert the value
	gui.set_size(node, size)
end

function init(self)
	-- Initialize the GUI script
	-- print("GUI Script Initialized")
	msg.post(".", "acquire_input_focus") 
	self.time = 0
	self.healthPercentage = 0 -- Initial health percentage
end

function on_message(self, message_id, message, sender)
	if message_id == hash("update_health_bar") then
		-- Update the health bar position based on the received character position
		local health_bar_offset = vmath.vector3(680, 270, 0) -- Adjust this offset as needed
		local new_health_bar_position = message.position + health_bar_offset
		local temp_position = vmath.vector3(-new_health_bar_position.x, -new_health_bar_position.y, new_health_bar_position.z)

		-- Set the position of the health bar GUI node
		gui.set_position(gui.get_node("healthbar-box"), new_health_bar_position)
	elseif message_id == hash("update_health") then
		local damage = message.damage or 0
		self.healthPercentage = self.healthPercentage + damage

		-- Ensure healthPercentage stops when dead
		if self.healthPercentage > 100 then
			self.healthPercentage = 100
			msg.post("#enemy1", "stop_sprite")
		end
		

		-- Update the health bar
		update_healthbar(self.healthPercentage)
	end
end

function update(self, dt)
	-- Perform any additional updates if needed
end
